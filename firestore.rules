rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Basic validation for required fields (only for create/update)
    function hasRequiredFields(data) {
      return data.keys().hasAll(['ID', 'Sheet_Name'])
        && data.ID is string
        && data.Sheet_Name is string;
    }

    // Validation for analysis document fields
    function hasValidAnalysisFields(data) {
      return data.keys().hasAll(['exchange', 'symbol'])
        && data.exchange is string
        && data.symbol is string
        && data.exchange.size() > 0
        && data.symbol.size() > 0;
    }

    // Match user document and all subcollections
    match /users/{userId}/{document=**} {
      // Allow read if user is authenticated and owns the data
      allow read: if isOwner(userId);
    }

    // Specific rule for trade data
    match /users/{userId}/{sheetName}/{tradeId} {
      allow create, update: if isOwner(userId)
        && hasRequiredFields(request.resource.data)
        && request.resource.data.ID == request.resource.id;
      allow delete: if isOwner(userId);
    }

    // Specific rule for settings/analysis
    match /users/{userId}/settings/analysis {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId)
        && hasValidAnalysisFields(request.resource.data);
      allow delete: if isOwner(userId);
    }
  }
} 